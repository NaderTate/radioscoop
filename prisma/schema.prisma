generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Episode {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  img          String
  link         String
  featured     Boolean   @default(false)
  description  String?
  preparedBy   Author?   @relation("preparedFeature", fields: [preparedById], references: [id])
  preparedById String?   @db.ObjectId
  presenter    Author?   @relation("presentedFeature", fields: [presenterId], references: [id])
  presenterId  String?   @db.ObjectId
  featureTitle String?
  type         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  published    Boolean   @default(false)
  author       Author?   @relation(fields: [authorId], references: [id])
  categoryId   String?   @db.ObjectId
  category     Category? @relation(fields: [categoryId], references: [id])
  authorId     String?   @db.ObjectId
}

model Author {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  label             String
  value             String
  episodes          Episode[]
  posts             Post[]
  Categories        Category[]
  PreparedFeatures  Episode[]  @relation("preparedFeature")
  PresentedFeatures Episode[]  @relation("presentedFeature")
  Videos            Video[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  img       String
  authorId  String    @db.ObjectId
  author    Author    @relation(fields: [authorId], references: [id])
  // year      Year      @relation(fields: [yearId], references: [id])
  // yearId    String    @db.ObjectId
  month     Month?    @relation(fields: [monthId], references: [id])
  monthId   String?   @db.ObjectId
  episodes  Episode[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  image       String
  content     String
  month       String?
  type        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(false)
  presenter   Author?  @relation(fields: [presenterId], references: [id])
  presenterId String?  @db.ObjectId
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  image         String
  sessions      Session[]
  Account       Account[]
  emailVerified DateTime? @map("verifiedAt")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  image       String
  link        String
  presenter   Author?  @relation(fields: [presenterId], references: [id])
  presenterId String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Year {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  year      String
  months    Month[]
  // categories Category[]
  monthsId  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Month {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  year       Year       @relation(fields: [yearId], references: [id])
  yearId     String     @db.ObjectId
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Schedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  Days      Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SideBar {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Items     Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime @map("expiresAt")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
